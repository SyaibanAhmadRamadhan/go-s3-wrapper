// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=interface_mockgen.go -package=wsqlx
//
// Package wsqlx is a generated GoMock package.
package wsqlx

import (
	context "context"
	reflect "reflect"

	go_s3_wrapper "github.com/SyaibanAhmadRamadhan/go-s3-wrapper"
	gomock "go.uber.org/mock/gomock"
)

// MockS3Client is a mock of S3Client interface.
type MockS3Client struct {
	ctrl     *gomock.Controller
	recorder *MockS3ClientMockRecorder
}

// MockS3ClientMockRecorder is the mock recorder for MockS3Client.
type MockS3ClientMockRecorder struct {
	mock *MockS3Client
}

// NewMockS3Client creates a new mock instance.
func NewMockS3Client(ctrl *gomock.Controller) *MockS3Client {
	mock := &MockS3Client{ctrl: ctrl}
	mock.recorder = &MockS3ClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3Client) EXPECT() *MockS3ClientMockRecorder {
	return m.recorder
}

// GetObject mocks base method.
func (m *MockS3Client) GetObject(ctx context.Context, input go_s3_wrapper.GetObjectInput) (go_s3_wrapper.GetObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", ctx, input)
	ret0, _ := ret[0].(go_s3_wrapper.GetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObject indicates an expected call of GetObject.
func (mr *MockS3ClientMockRecorder) GetObject(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockS3Client)(nil).GetObject), ctx, input)
}

// PresignedUrlGetObject mocks base method.
func (m *MockS3Client) PresignedUrlGetObject(ctx context.Context, input go_s3_wrapper.PresignedUrlGetObjectInput) (go_s3_wrapper.PresignedUrlGetObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresignedUrlGetObject", ctx, input)
	ret0, _ := ret[0].(go_s3_wrapper.PresignedUrlGetObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignedUrlGetObject indicates an expected call of PresignedUrlGetObject.
func (mr *MockS3ClientMockRecorder) PresignedUrlGetObject(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignedUrlGetObject", reflect.TypeOf((*MockS3Client)(nil).PresignedUrlGetObject), ctx, input)
}

// PresignedUrlUploadObject mocks base method.
func (m *MockS3Client) PresignedUrlUploadObject(ctx context.Context, input go_s3_wrapper.PresignedUrlUploadObjectInput) (go_s3_wrapper.PresignedUrlUploadObjectOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PresignedUrlUploadObject", ctx, input)
	ret0, _ := ret[0].(go_s3_wrapper.PresignedUrlUploadObjectOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PresignedUrlUploadObject indicates an expected call of PresignedUrlUploadObject.
func (mr *MockS3ClientMockRecorder) PresignedUrlUploadObject(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PresignedUrlUploadObject", reflect.TypeOf((*MockS3Client)(nil).PresignedUrlUploadObject), ctx, input)
}
